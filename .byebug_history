c
\c
c
disp best_score
disp best_piece.to_s
disp score
exit
c
disp best_piece.to_s
disp piece.to_s
disp best_score
disp score
c
disp best_piece.to_s
disp best_score
disp score
exit
c
disp best_piece
disp best_score
dispc best_score
disp score
c
disp best_piece.to_s
disp best_piece
score
c
best_piece.value
best_piece
c
disp best_score
c
best_score
c
board.score
c
move
c
move
c
move
c
score
c
disp score
c
score
c
all_moves.length
c
all_moves.length
c
all_moves.length
c
all_moves.length
c
all_moves.length
c
all_moves.length
c
all_moves.length
exit
all_moves.length
all_moves
all_moves.length
c
all_moves
all_moves.length
c
all_moves.length
all_moves
c
all_moves.length
all_moves
exit
all_moves
all_moves.length
exit
end_pos
start_pos
c
start_pos
end_pos
exit
c
disp random_moves(board).length
exit
xit
c
n
c
n
c
n
disp piece.valid_moves
disp piece.symbol
exit
exir
all_my_pieces.length
c
all_my_pieces.length
c
all_my_pieces.length
c
all_my_pieces.length
c
all_my_pieces.length
all_my_pieces
exit
all_moves
c
all_moves
c
disp all_moves.size
all_moves.size
c
n
disp move
n
disp board.score(self.color)
move
c
move
c
move
c
move
c
board.score(self.color)
board.score
n
move
c
disp score
score
c
score
exit
c
n
nn
n
disp score
n
score
exit
board_value
c
best_move
c
best_move
n
exit
e.message
n
c
e.message
e.messages
n
exit
n
exit
e.message
n
exit
piece.valid_moves
c
piece.valid_moves
piece
exit
e.message
n
 all_moves.reject{|move| move.empty? }
n
end_pos
start_pos
exit
start_pos
e.message
e.messages
n
all_moves
n
exit
eit
e.message
e.messages
n
exit
self.color
n
move
n
c
exit
end_pos
start_pos
e.message
n
move
n
move
n
all_moves
n
[start_pos, end_pos]
exit
c
c@moved
@moved
!!@moved
!!moved
!!@moved
moved
exit
e.message
e.messages
n
board[false]n
board[false]
piece_pos
exit
c
cc
c
disp available_moves
cx
cc
c
exit
c
exit
c
board[[i, j]].moves
board[[i, j]].to_s.moves
board[[i, j]].to_s.maoves
board[[i, j]].to_s
board[[i, j]]
board[[i, j]
board[i, j]
board
i
i, j
c
n
display self[start_pos].to_s
dispaly self[start_pos].to_s
self[start_pos].to_s
self[start_pos]
dis self[start_pos]
exit
n
self[4,4]
self[4,4].to_s
s
start
